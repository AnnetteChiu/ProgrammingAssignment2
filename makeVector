# These two funtions cache the computation of the inverse of a matrix
# They might save time on time-consuming calucations.

# This functions makes a special "vector," which is really a list containing a function to:
# - set the value of the vector, get the value of the vector, 
# - set the value of the inverse and get the value of the inverse

makeCacheMatrix <- function(x = matrix()) {
  i <- NULL
  set <- function(y) {
    x <<- y
    i <<- NULL
  }
  get <- function() x
  setinv <- function(inv) i <<- inv
  getinv <- function() i
  list(set = set, get = get,
       setinv = setinv,
       getinv = getinv)
}


# This function calculates the inverse of a square matrix.
# It does so by:  First checking to see if the if the inverse has already been calculated.
# If not already calculated, the function calculates the inverse via the scolve() function.
# And then, it sets the value of the inversion in the cache.
  
cacheSolve <- function(x, ...) {
  i <- x$getinv()
  if(!is.null(i)) {
    message("getting cached data")
    return(i)
  }
  data <- x$get()
  i <- solve(data, ...)
  x$setinv(i)
  i
}
